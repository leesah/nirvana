image: openjdk:8-jdk

variables:
  TARGET_SDK: "26"
  SDK_TOOLS_VERSION: "3859397" # Find latest at: https://developer.android.com/studio/index.html#downloads
  GCLOUD_SDK_VERSION: "183.0.0" # Find latest at: https://cloud.google.com/sdk/docs/quickstart-linux#before-you-begin
  WAIT_FOR_EMULATOR: "https://gist.githubusercontent.com/anonymous/614aafb2d8710865c688684a8657a141/raw/f7f518bb7ed237f02587963812d8b90cef11f28b/android-wait-for-emulator.sh"
  STOP_EMULATOR: "https://gist.githubusercontent.com/anonymous/614aafb2d8710865c688684a8657a141/raw/f7f518bb7ed237f02587963812d8b90cef11f28b/stop-emulators.sh"

  ANDROID_SDK_ROOT: "/opt/android-sdk"
  ANDROID_HOME: "${ANDROID_SDK_ROOT}"
  GCLOUD_SDK_ROOT: "/opt/google-cloud-sdk"
  APK_DIR: "${CI_PROJECT_DIR}/nirvana/build/outputs/apk"

  GIT_SUBMODULE_STRATEGY: recursive

stages:
  - assemble
  - test
  - release

.apt-get-packages: &apt-get-packages apt-get -qq update --yes && apt-get -qq install --yes wget unzip tar

# Jobs that require the Android SDK
.requires-android-sdk: &requires-android-sdk
  before_script:
    - *apt-get-packages
    # Install Android SDK
    - mkdir --parents ~/.android ${ANDROID_SDK_ROOT}/licenses/
    - echo "count=0" > ~/.android/repositories.cfg
    - echo d56f5187479451eabf01fb78af6dfcb131a6481e > ${ANDROID_SDK_ROOT}/licenses/android-sdk-license
    - echo 84831b9409646a918e30573bab4c9c91346d8abd > ${ANDROID_SDK_ROOT}/licenses/android-sdk-preview-license
    - echo 33b6a2b64607f11b759f320ef9dff4ae5c47d97a > ${ANDROID_SDK_ROOT}/licenses/google-gdk-license
    - echo 601085b94cd77f0b54ff86406957099ebe79c4d6 > ${ANDROID_SDK_ROOT}/licenses/android-googletv-license
    - echo e9acab5b5fbb560a72cfaecce8946896ff6aab9d > ${ANDROID_SDK_ROOT}/licenses/mips-android-sysimage-license
    - wget --quiet --output-document=/tmp/android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${SDK_TOOLS_VERSION}.zip
    - unzip /tmp/android-sdk.zip -d ${ANDROID_SDK_ROOT}
    - ${ANDROID_SDK_ROOT}/tools/bin/sdkmanager "platforms;android-${TARGET_SDK}" "extras;google;google_play_services" "extras;google;m2repository" "extras;android;m2repository"
    # Secrets
    - echo ${APK_SIGNING_INFORMATION} > ${CI_PROJECT_DIR}/keystore.properties
    - echo ${PLAY_PUBLISH_AUTH_KEY} > ${CI_PROJECT_DIR}/nirvana/play-publish-auth-key.json
    - echo ${GOOGLE_SERVICES_CONFIG} > ${CI_PROJECT_DIR}/nirvana/google-services.json
    - echo ${FIREBASE_CRASHREPORTING_AUTH_KEY} > /tmp/firebase-crashreporting-auth-key.json
  after_script:
    # Wipe the secrets
    - rm --force ${CI_PROJECT_DIR}/keystore.properties ${CI_PROJECT_DIR}/nirvana/play-publish-auth-key.json ${CI_PROJECT_DIR}/nirvana/google-services.json /tmp/firebase-crashreporting-auth-key.json

# Jobs that require the Google Cloud SDK
.requires-google-cloud-sdk: &requires-google-cloud-sdk
  before_script:
    - *apt-get-packages
    # Install Google Cloud SDK
    - wget --quiet --output-document=- https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_SDK_VERSION}-linux-x86_64.tar.gz | tar --extract --directory=/opt
    # Authentication
    - echo ${GCLOUD_PROJECT_AUTH_KEY} > /tmp/gcloud-project-auth-key.json
    - ${GCLOUD_SDK_ROOT}/bin/gcloud auth activate-service-account --key-file /tmp/gcloud-project-auth-key.json
  after_script:
    # Wipe the authentication key
    - rm --force /tmp/gcloud-project-auth-key.json

# Jobs that run on every pushe
.runs-on-push: &runs-on-push
  only:
    - branches
  except:
    - tags

# Jobs that run only nightly
.runs-nightly: &runs-nightly
  only:
    - schedules

# Jobs that uses -debug.apk or -debug-androidTest.apk
.uses-debug-apk: &uses-debug-apk
  dependencies:
    - assemble:debug

# Jobs that uses -release.apk or -release-androidTest.apk
.uses-release-apk: &uses-release-apk
  dependencies:
    - assemble:release

.runs-local-instrumental-test: &runs-local-instrumental-test
  <<: *requires-android-sdk
  <<: *uses-debug-apk
  stage: test
  script:
    - ${ANDROID_SDK_ROOT}/tools/bin/sdkmanager "tools" "emulator" "system-images;android-${API_LEVEL};google_apis;${ABI_ARCH}"
    - echo no | ${ANDROID_SDK_ROOT}/tools/bin/avdmanager --silent create avd --name Lavigne --package "system-images;android-${API_LEVEL};google_apis;${ABI_ARCH}"
    - ${ANDROID_SDK_ROOT}/emulator/emulator -avd Lavigne -no-audio -no-window &
    - wget --quiet --output-document=- ${WAIT_FOR_EMULATOR} | sh
    - adb devices
    - adb shell settings put global window_animation_scale 0
    - adb shell settings put global transition_animation_scale 0
    - adb shell settings put global animator_duration_scale 0
    - adb shell input keyevent 82
    - ${CI_PROJECT_DIR}/gradlew createDebugCoverageReport
    - cat "${CI_PROJECT_DIR}/nirvana/build/reports/coverage/debug/index.html"
    - wget --quiet --output-document=- ${STOP_EMULATOR} | sh
  artifacts:
    paths:
    - ${CI_PROJECT_DIR}/nirvana/build/reports/androidTests/connected
    - ${CI_PROJECT_DIR}/nirvana/build/reports/coverage/debug

# Jobs that run instrumental tests on Firebase
.runs-firebase-instrumental-test: &runs-firebase-instrumental-test
  <<: *requires-google-cloud-sdk
  <<: *uses-release-apk
  stage: test
  script:
    - >
        ${GCLOUD_SDK_ROOT}/bin/gcloud firebase test android run --project nirvana-app --type instrumentation
        --app ${APK_DIR}/debug/nirvana-release.apk
        --test ${APK_DIR}/androidTest/debug/nirvana-release-androidTest.apk
        --device model=${VIRTUAL_DEVICE},version=${API_LEVEL},locale=en,orientation=portrait
        --device model=${PHYSICAL_DEVICE},version=${API_LEVEL},locale=en,orientation=portrait

# Jobs that run robo tests on Firebase
.runs-firebase-robo-test: &runs-firebase-robo-test
  <<: *requires-google-cloud-sdk
  <<: *uses-release-apk
  stage: test
  script:
    - >
        ${GCLOUD_SDK_ROOT}/bin/gcloud firebase test android run --project nirvana-app --type robo
        --app ${APK_DIR}/debug/nirvana-release.apk
        --device model=${VIRTUAL_DEVICE},version=${API_LEVEL},locale=en,orientation=portrait
        --device model=${PHYSICAL_DEVICE},version=${API_LEVEL},locale=en,orientation=portrait

#
# Continuous integration jobs
#

# Assemble -debug.apk & -debug-androidTest.apk
assemble:debug:
  <<: *runs-on-push
  <<: *requires-android-sdk
  stage: assemble
  script:
    - ${CI_PROJECT_DIR}/gradlew assembleDebug assembleDebugAndroidTest
  artifacts:
    expire_in: 1 week
    paths:
      - ${APK_DIR}

# Run local unit tests
test:local:unit:
  <<: *runs-on-push
  <<: *requires-android-sdk
  <<: *uses-debug-apk
  stage: test
  script:
    - ${CI_PROJECT_DIR}/gradlew jacocoTestDebugUnitTestReport
    - cat "${CI_PROJECT_DIR}/nirvana/build/reports/jacoco/jacocoTestDebugUnitTestReport/html/index.html"
  artifacts:
    expire_in: 1 week
    paths:
    - ${CI_PROJECT_DIR}/nirvana/build/reports/tests/testDebugUnitTest
    - ${CI_PROJECT_DIR}/nirvana/build/reports/jacoco/jacocoTestDebugUnitTestReport/html

# Run instrumental tests locally against API 24
test:local:instrumental:api24:
  <<: *runs-on-push
  <<: *runs-local-instrumental-test
  variables:
    API_LEVEL: "24"
    ABI_ARCH: "x86_64"

# Run instrumental tests locally against API 26
test:local:instrumental:api26:
  <<: *runs-on-push
  <<: *runs-local-instrumental-test
  variables:
    API_LEVEL: "26"
    ABI_ARCH: "x86_64"

#
# Continuous delivery jobs
#

# Assemble -release.apk & -release-androidTest.apk
assemble:release:
  <<: *runs-nightly
  <<: *requires-android-sdk
  stage: assemble
  script:
    - ${CI_PROJECT_DIR}/gradlew assembleRelease assembleReleaseAndroidTest
  artifacts:
    expire_in: 1 week
    paths:
      - ${APK_DIR}

# Run instrumental tests on Firebase against API 24
test:firebase:instrumental:api24:
  <<: *runs-nightly
  <<: *runs-firebase-instrumental-test
  variables:
    API_LEVEL: "24"
    VIRTUAL_DEVICE: "Nexus5X"
    PHYSICAL_DEVICE: "herolte"

# Run instrumental tests on Firebase against API 26
test:firebase:instrumental:api26:
  <<: *runs-nightly
  <<: *runs-firebase-instrumental-test
  variables:
    API_LEVEL: "26"
    VIRTUAL_DEVICE: "Nexus5X"
    PHYSICAL_DEVICE: "sailfish"

# Run robo tests on Firebase against API 24
test:firebase:robo:api24:
  <<: *runs-nightly
  <<: *runs-firebase-robo-test
  allow_failure: true
  variables:
    API_LEVEL: "24"
    VIRTUAL_DEVICE: "Nexus5X"
    PHYSICAL_DEVICE: "sailfish"

# Run robo tests on Firebase against API 26
test:firebase:robo:api26:
  <<: *runs-nightly
  <<: *runs-firebase-robo-test
  allow_failure: true
  variables:
    API_LEVEL: "26"
    VIRTUAL_DEVICE: "Nexus5X"
    PHYSICAL_DEVICE: "sailfish"

# Tag a release
release:tag:
  <<: *runs-nightly
  stage: release
  before_script:
    - apt-get -qq update --yes && apt-get -qq install --yes sed git
    - git config --global user.email "ci@leesah.name"
    - git config --global user.name "GitLab-CI"
  script:
    - sed --regexp-extended --in-place 's/^(versionCode=)([0-9]+)$/echo "\1$((\2+1))"/ge' ${CI_PROJECT_DIR}/version.properties
    - sed --regexp-extended 's/^(versionCode)=([0-9]+)$/echo "Step \1 for release-\2"/ge' ${CI_PROJECT_DIR}/version.properties | xargs -I{} git -C ${CI_PROJECT_DIR} commit --message="{}" ${CI_PROJECT_DIR}/version.properties
    - sed 's/versionCode=/release-/' version.properties | xargs -I{} git -C ${CI_PROJECT_DIR} tag {}
    - echo ${CI_REPOSITORY_URL} | sed --regexp-extended 's/^(.*)gitlab-ci-token:.*(@.*)$/echo "\1${GITLAB_USER_LOGIN}:${GITLAB_ACCESS_TOKEN}\2"/ge' | xargs -I{} git -C ${CI_PROJECT_DIR} push --tags {} HEAD:master

# Release to Google Play alpha track
release:alpha:
  <<: *requires-android-sdk
  <<: *uses-release-apk
  stage: release
  only:
    - /^release-[0-9]+$/
  script:
    - ${CI_PROJECT_DIR}/gradlew -PFirebaseServiceAccountFilePath=/tmp/firebase-crashreporting-auth-key.json publishApkRelease firebaseUploadReleaseProguardMapping
  artifacts:
    paths:
    - ${APK_DIR}
    - ${CI_PROJECT_DIR}/nirvana/build/outputs/mapping
