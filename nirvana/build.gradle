apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-crash'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'

def versionProperties = new Properties()
versionProperties.load(new FileInputStream(rootProject.file('version.properties')))

def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(rootProject.file('keystore.properties')))

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    playAccountConfigs {
        defaultAccountConfig {
            jsonFile = file('play-publish-auth-key.json')
        }
    }
    defaultConfig {
        applicationId 'name.leesah.nirvana'
        minSdkVersion 24
        targetSdkVersion 26
        versionCode versionProperties['versionCode'].toInteger()
        versionName "SH${new Date().format('yyMMddHHmm')}"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }
    signingConfigs {
        config {
            storeFile rootProject.file('keystore/upload-keys.jks')
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }
    productFlavors {
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    sourceSets {
        String sharedTestDir = 'src/testCommon/java'
        test {
            java.srcDir sharedTestDir
        }
        androidTest {
            java.srcDir sharedTestDir
        }
    }
    lintOptions {
        abortOnError false
    }
}

play {
    track = 'alpha'
    userFraction = 1
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // Support library
    implementation libraries.support.appcompat_v7
    implementation libraries.support.design
    implementation libraries.support.cardview_v7
    implementation libraries.support.constraint_layout
    androidTestImplementation libraries.support.annotations
    androidTestImplementation libraries.support.recyclerview_v7
    androidTestImplementation libraries.support.design
    // Firebase
    implementation libraries.firebase.core
    implementation libraries.firebase.crash
    implementation libraries.firebase.appindexing
    implementation libraries.firebase.ads
    implementation (libraries.firebase.crashlytics) {transitive = true}
    // JUnit, Mockito & Hamcrest
    testImplementation libraries.junit
    testImplementation libraries.mockito.core
    androidTestImplementation libraries.junit
    androidTestImplementation libraries.hamcrest
    androidTestImplementation libraries.mockito.android
    // Robolectric
    // http://robolectric.org/getting-started/
    testImplementation libraries.robolectric
    // Espresso
    // https://developer.android.com/training/testing/espresso/setup.html
    androidTestImplementation libraries.support.test.runner
    androidTestImplementation libraries.support.test.rules
    androidTestImplementation libraries.espresso.core
    androidTestImplementation libraries.espresso.contrib
    // Utility libraries
    implementation libraries.gson
    implementation libraries.joda_time
    implementation libraries.apache_commons.lang3
    implementation libraries.guava
    testImplementation libraries.guava
    androidTestImplementation libraries.guava
    implementation libraries.findbugs
    androidTestImplementation libraries.findbugs
}

junitJacoco {
    excludes = [
            'name/leesah/nirvana/ui/main/*.class',
            'name/leesah/nirvana/ui/medication/*.class',

            // Following are copied from https://github.com/vanniktech/gradle-android-junit-jacoco-plugin/blob/master/src/main/groovy/com/vanniktech/android/junit/jacoco/GenerationPlugin.groovy
            '**/R.class',
            '**/R2.class', // ButterKnife Gradle Plugin
            '**/R$*.class',
            '**/R2$*.class', // ButterKnife Gradle Plugin
            '**/*$$*',
            '**/*$ViewInjector*.*', // Older ButterKnife Versions
            '**/*$ViewBinder*.*', // Older ButterKnife Versions
            '**/*_ViewBinding*.*', // Newer ButterKnife Versions
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
            '**/*Dagger*.*', // Dagger auto-generated code.
            '**/*MembersInjector*.*', // Dagger auto-generated code.
            '**/*_Provide*Factory*.*', // Dagger auto-generated code.
            '**/*_Factory*.*', // Dagger auto-generated code.
            '**/*$JsonObjectMapper.*', // LoganSquare auto-generated code.
            '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
            '**/*$Icepick.*', // Icepick auto-generated code.
            '**/*$StateSaver.*', // android-state auto-generated code.
            '**/*AutoValue_*.*' // AutoValue auto-generated code.
    ]
}

apply plugin: 'com.google.gms.google-services'
